name: Release

# Add a concurrency group incase a tag is created, deleted, and then recreated while a release is in progress.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Only run this workflow when a tag is pushed when the tag starts with "v".
on:
  push:
    tags:
      - 'v*'

# So we can use the GitHub API to create releases with the run token.
permissions:
  contents: write

env:
  PUBLIC_NAME: "Athavar's Tools"
  SOLUTION_NAME: 'Athavar.FFXIV.Plugin'
  INTERNAL_NAME: 'Athavar.FFXIV.Plugin'
  PERSONAL_PLUGIN_REPO: 'Athavar/Athavar.FFXIV.DalaRepo'

jobs:
  Release:
    if: github.event.pull_request.draft == false # Ignore draft PRs
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      IsCI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_SECRET }}
          submodules: recursive

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Download Dalamud
        run: |
          wget https://goatcorp.github.io/dalamud-distrib/stg/latest.zip -O /tmp/dalamud.zip
          unzip /tmp/dalamud.zip -d /tmp/dalamud

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build
        run: |
          release_version=$(echo ${{ github.ref_name }} | sed 's/^v//')
          dotnet build --configuration Release -v n /p:DalamudLibPath="/tmp/dalamud" /p:SolutionDir=`pwd` -o ./bin/Release /p:Version=$release_version src/${{ env.INTERNAL_NAME }}
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: true

      - name: Generate Checksums
        working-directory: ./bin/Release/${{ env.INTERNAL_NAME }}
        run: |
          sha512sum latest.zip >> checksums.sha512

      - uses: actions/upload-artifact@v3
        with:
          name: PluginRepoZip
          path: ./bin/Release/${{ env.INTERNAL_NAME }}
          if-no-files-found: error

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./bin/Release/${{ env.INTERNAL_NAME }}/latest.zip
            ./bin/Release/${{ env.INTERNAL_NAME }}/checksums.sha512
          prerelease: false # Releases cant be marked as prereleases as Dalamud wont be able to find them
          append_body: true # Append the release notes to the release body
          # body_path: .github/release-notices.md # These notes are automatically added to the release body every time.
          generate_release_notes: true # Automatically makes a release body from PRs since the last release.
          fail_on_unmatched_files: true # If the files arent found, fail the workflow and abort the release.
  
  Deploy:
    needs: [ Release ]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: false
          repository: ${{ env.PERSONAL_PLUGIN_REPO }}
          token: ${{ secrets.GIT_SECRET }}

      - uses: actions/download-artifact@v3
        with:
          name: PluginRepoZip
          path: /tmp

      - name: Update manifest
        run: |
          cp /tmp/${{ env.INTERNAL_NAME }}.json plugins/${{ env.INTERNAL_NAME }}/${{ env.INTERNAL_NAME }}.manifest -f
          release_version=$(echo ${{ github.ref_name }} | sed 's/^v//')
          repo_url=$(echo ${{ github.server_url }}/${{ github.repository }} | sed 's/#/\\#/g')
          sed -i plugins/${{ env.INTERNAL_NAME }}/${{ env.INTERNAL_NAME }}.manifest -E \
              -e 's#"AssemblyVersion": "([0-9]*\.){2,3}[0-9]*"#"AssemblyVersion": "'"$release_version"'"#g' \
              -e 's#"FeedbackMessage": "[^"]*"#"DownloadLinkInstall": "'"$repo_url/releases/download/${{ github.ref_name }}/latest.zip"'"#g'

      - uses: EndBug/add-and-commit@v9
        with:
          add: --all
          author_name: GitHub Action
          author_email: action@github.com
          message: Update ${{ env.INTERNAL_NAME }}